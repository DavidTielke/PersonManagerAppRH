@page "/persons"
@    using DavidTielke.PersonManagerApp.CrossCutting.DataClasses
@    using DavidTielke.PersonManagerApp.Backend.Logic.PersonManagement
@attribute [StreamRendering]
@inject IPersonManager personManager

<PageTitle>Personen</PageTitle>

<h1>Personen</h1>

<p>Alle Erwachsenen in der Datenbank</p>

@if (adults == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Age</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var person in adults)
            {
                <tr>
                    <td>@person.Id</td>
                    <td>@person.Name</td>
                    <td>@person.Age</td>
                </tr>
            }
        </tbody>
    </table>
}

<p>Alle Kinder in der Datenbank</p>

@if (children == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Id</th>
            <th>Name</th>
            <th>Age</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var person in children)
        {
            <tr>
                <td>@person.Id</td>
                <td>@person.Name</td>
                <td>@person.Age</td>
            </tr>
        }
        </tbody>
    </table>
}


@code {

    private List<Person> adults = new List<Person>();
    private List<Person> children = new List<Person>();



    protected override async Task OnInitializedAsync()
    {
        adults = personManager.GetAllAdults();
        children = personManager.GetAllChildren();
    }
}
